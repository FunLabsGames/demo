//1st attempt solutions

// JAVA- search by aircraft manufacturer

import java.io.*;
import java.sql.*;
import java.util.ArrayList;


public class Main {
    public static void main(String args[]) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter the Aircraft manufacturer :");
        String name = br.readLine();
        
        AircraftDAO ad = new AircraftDAO();
        ArrayList<String> a1 = ad.listModels(name);

        int n = a1.size();
        System.out.println("The models provided by"+name+"are : ");
        for(int i=0;i<n;i++)
        {
            System.out.println(a1.get(i));
        }
    }
    
}

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.*;
import java.util.ArrayList;


public class AircraftDAO {
    public ArrayList<String> listModels(String name) throws ClassNotFoundException, SQLException{

      ArrayList<String> a1 = new ArrayList<>();
      Connection con = DBConnection.getConnection();

      String q = "select model from aircraft where aircraft_manufacturer_id =(select aircraft_manufacturer_id from aircraft_manufacturer where name='"+name+"')";
      PreparedStatement ps= con.prepareStatement(q);

      ResultSet rs= ps.executeQuery();

      while(rs.next())
      {
          String s = rs.getString("model");
          a1.add(s);

      }  
      return a1;
        //fill your code
    }
}


import java.sql.*;
import java.util.ResourceBundle;
public class DBConnection {
	public static Connection getConnection() throws ClassNotFoundException, SQLException {        
        ResourceBundle rb = ResourceBundle.getBundle("oracle");
        String url = rb.getString("db.url");
        String username = rb.getString("db.username");
        String password = rb.getString("db.password");

        DriverManager.registerDriver(new oracle.jdbc.OracleDriver());
        Connection con = DriverManager.getConnection(url,username,password);
        return con;
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------

//SPRING MVC- login valdiation

//LoginValidator.java

package com.spring;

import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

@Component
public class LoginValidator implements Validator {

    @Override
    public boolean supports(Class<?> type) {
       throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void validate(Object o, Errors errors) {
        ValidationUtils.rejectIfEmpty(errors,"userName","user.userName.empty");
        ValidationUtils.rejectIfEmpty(errors,"password","user.password.empty");
     
    }
}

//User.java

package com.spring;
import org.springframework.stereotype.Service;

@Service("user")
public class User {
    String userName;
    String password;

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

//LoginController.java

package com.spring;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class LoginController {
    @Autowired
    private LoginValidator lv;
    
    @RequestMapping(value="/")
    public ModelAndView login(){
        ModelAndView mv= new ModelAndView();
        mv.setViewName("Login");

        return mv;
    }
    
    @RequestMapping(value="/loginProcess.do")
    public ModelAndView loginProcess(@ModelAttribute("user") User user,BindingResult result){
        lv.validate(user,result);
        if(result.hasErrors()){
        ModelAndView mv=new ModelAndView();
        mv.setViewName("Login");
        return mv;}
        return new ModelAndView("Home");
         
    }
}


//spring-servlet.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
	<context:annotation-config></context:annotation-config>
    <context:component-scan base-package="com.spring"></context:component-scan>
    <context:property-placeholder location="classpath:oracle.properties"/>
    <mvc:annotation-driven></mvc:annotation-driven>
    <mvc:resources location="/resources/" mapping="/resources/** " />
    
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>   
    
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames" value="/WEB-INF/messages/messages"></property>
    </bean>
</beans>


//web.xml

<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd">
    <servlet>
    <servlet-name>spring</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
    <servlet-name>spring</servlet-name>
    <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>


//messages.properties

user.userName.empty=User Name cannot be empty!
user.password.empty=Password cannot be empty!


//Home.jsp

<%@page import="com.spring.User"%>
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>JSP Page</title>
    </head>
    <style>
                #grad1 {
	height: 50% ;
        background: lightsteelblue;
	background: linear-gradient(lightsteelblue, lightskyblue);
}

body {
	background-repeat: no-repeat;
	background-attachment: fixed;
	background-position: center;
}

.header {
	background-color: lightsteelblue;
	width: 100%;
}
	
 .footer {
	position: absolute;
	right: 0;
	bottom: 0;
	left: 0;
	height: 5%;
	text-align: center;
}

#content {
	position: absolute;
	top: 220px;
	left: 150px;
	text-align: center;
}

p {
	margin-left: 20px;
	font-family: 'Courier New', Courier, 'Lucida Sans Typewriter',
		'Lucida Typewriter', monospace;
	font-size: 16px;
	font-style: normal;
	font-variant: normal;
	font-weight: bold;
	line-height: 26.4px;
}

.boxed {
	width: 500px;
	padding: 10px;
	border: 2px solid black;
	margin: 10px;
	text-align: center;
	background-color: lightblue;
}

.p1 {
	color: white;
}
#data{
    padding-top:70px;
    padding-left:10px;
    
}
#formdiv{
    padding-left:40px;
    padding-bottom:20px;
}
#resultTable{
  
}
        #data{
            padding-top:100px;
            padding-left:100px;
        }
    </style>
    <body>
        <div class="header">
		<table>
			<tr>
				<td><img
					src="${pageContext.request.contextPath}/resources/images/abcevents.png"
					height="120" width="150" style="float: left";></td>
				<td><span style="vertical-align: middle">
						<h1
							style="font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif">
							Enriching Entertainment
							</h3>
				</span></td>
			</tr>
		</table>
		<!--  <span style="float:right"><a href="Contactus">Contact Us</a>
            &nbsp&nbsp<a href="login">Login</a>&nbsp&nbsp<a href="Todaysevents">Today's Events</a></span> -->
	</div>
       
        
        <div id="data" >
            <h1>Login Successful!</h1>
			<p>Welcome Mr.${user.userName}</p>
           </div>
    </body>
</html>


//Login.jsp

<%@taglib prefix="form" uri="http://www.springframework.org/tags/form"%> 
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
      

<!-- jQuery library -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

<!-- Latest compiled JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
        <title>Login</title>
    </head>
    <style>
        #grad1 {
	height: 50% ;
        background: lightsteelblue;
	background: linear-gradient(lightsteelblue, lightskyblue);
}

body {
	background-repeat: no-repeat;
	background-attachment: fixed;
	background-position: center;
}

.header {
	background-color: lightsteelblue;
	width: 100%;
}
	
 .footer {
	position: absolute;
	right: 0;
	bottom: 0;
	left: 0;
	height: 5%;
	text-align: center;
}

#content {
	position: absolute;
	top: 220px;
	left: 150px;
	text-align: center;
}

p {
	margin-left: 20px;
	font-family: 'Courier New', Courier, 'Lucida Sans Typewriter',
		'Lucida Typewriter', monospace;
	font-size: 16px;
	font-style: normal;
	font-variant: normal;
	font-weight: bold;
	line-height: 26.4px;
}

.boxed {
	width: 500px;
	padding: 10px;
	border: 2px solid black;
	margin: 10px;
	text-align: center;
	background-color: lightblue;
}

.p1 {
	color: white;
}
#data{
    padding-top:70px;
    padding-left:10px;
    
}
#formdiv{
    padding-left:40px;
    padding-bottom:20px;
}
#resultTable{
  
}
        #data{
            padding-top:100px;
            padding-left:100px;
        }
        .errormsg{
            padding:5px;
            color:red;
        }
        button{
            padding:5px;
        }
    </style>
    <body>
        <div class="header">
		<table>
			<tr>
				<td><img
					src="${pageContext.request.contextPath}/resources/images/abcevents.png"
					height="120" width="150" style="float: left";></td>
				<td><span style="vertical-align: middle">
						<h1
							style="font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif">
							Enriching Entertainment
							</h3>
				</span></td>
			</tr>
		</table>
		<!--  <span style="float:right"><a href="Contactus">Contact Us</a>
            &nbsp&nbsp<a href="login">Login</a>&nbsp&nbsp<a href="Todaysevents">Today's Events</a></span> -->
	</div>
        
        <div id="data"  >
           
        <form id="loginform" action="loginProcess.do" method="POST">
            <table id="formTable">
                <tr>
                    <td> Username </td>
                    <td><input type="text" name="userName"/></td>
                	<td class=errormsg><form:errors path="user.userName" /></td>
                </tr>
                <tr>
                    <td> Password </td>
                    <td><input type="password" name="password"/></td>
					<td class=errormsg><form:errors path="user.password" /></td>
                </tr>
                <tr>
                    <td colspan="2" style="text-align: center;"><button class="btn-primary">Login</button></td>
                </tr>
            </table>
           
        </form>
        </div>
    </body>
</html>

--------------------------------------------------------------------------------------------

//SPRING BOOT- @GetMapping Annotation

//DoctorController

package com.springboot.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import com.springboot.dao.DoctorDAO;
import com.springboot.domain.Doctor;

@RestController
public class DoctorController {
DoctorDAO d = new DoctorDAO();

@GetMapping("/doctor/list")
public List<Doctor> getDoctors(){


return d.list();
}
@PostMapping("/doctor/create")
public Boolean create(@RequestBody Doctor doctor) {
return d.save(doctor);
}

}


//App

package com.springboot;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.springboot.controller.DoctorController;

@SpringBootApplication
public class App 
{
public static void main(String[] args) 
{
SpringApplication.run(App.class, args);
}
}

//Doctor

package com.springboot.domain;

public class Doctor {

private Integer id;
private String name;
private String qualification;
private Double experience;
private String specialization;
private Double consultingFees;

public Doctor(Integer id, String name, String qualification,
Double experience, String specialization, Double consultingFees) {
super();
this.id = id;
this.name = name;
this.qualification = qualification;
this.experience = experience;
this.specialization = specialization;
this.consultingFees = consultingFees;
}

public Integer getId() {
return id;
}
public void setId(Integer id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getQualification() {
return qualification;
}
public void setQualification(String qualification) {
this.qualification = qualification;
}
public Double getExperience() {
return experience;
}
public void setExperience(Double experience) {
this.experience = experience;
}
public String getSpecialization() {
return specialization;
}
public void setSpecialization(String specialization) {
this.specialization = specialization;
}
public Double getConsultingFees() {
return consultingFees;
}
public void setConsultingFees(Double consultingFees) {
this.consultingFees = consultingFees;
}
}

//DoctorDAO

package com.springboot.dao;

import java.util.*;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.stereotype.Component;
import com.springboot.domain.Doctor;

@Component
public class DoctorDAO 
{
    static ArrayList<Doctor> doctorList = new ArrayList<Doctor>();

    static 
    {
        doctorList.add(new Doctor(1,"Elizabeth","MBBS",4.2,"Cardiologist",750.00));
        doctorList.add(new Doctor(2,"Michael","MBBS",2.0,"Dermatologist",1500.00));
        doctorList.add(new Doctor(3,"Charlotte","MBBS",3.1,"Pediatrics",200.00));
        doctorList.add(new Doctor(4,"Lucas","BDS",1.9,"Dentist",250.00));
    }

    public Boolean save(Doctor doctor) 
    {
        doctorList.add(doctor);
        return true;
    }

    public List<Doctor> list() 
    {
        return doctorList;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------

//UI

<!DOCTYPE html>
<html>
	<head>	
	</head>
	<body>
		<h2>Event Management</h2>
		<label for="name">Event Name</label>
		<input type="text" name="name" id="name"/>
		<br />
		<label for="venue">Venue</label>
		<input type="text" name="venue" id="venue"/>
		<br />
		<label for="date">Date</label>
		<input type="date" name="date" id="date"/>
		<br />
		<label for="price">Cost/day</label>
		<input type="text" name="price" id="price"/>
		<br />
		<label for="count">No of days Needed</label>
		<input type="text" name="count" id="count"/>
		<br />
		<input id="addEvent" type="button" onclick="addEvent()" value "Add Event"/>
		<div id="result"></div>
		<script src="./script.js"></script>
	</body>
</html>



Js part____

var event_arr=[];

function addEvent(){

	var event1={

		name: document.getElementById("name").value,
		venue: document.getElementById("venue").value,
		date: document.getElementById("date").value,
		price: document.getElementById("price").value,
		days: document.getElementById("count").value

	};
	event_arr.push(event1);
	display();
	
}
function display(){
	tableStart =`<table id='resultTable'>
      <tr>
	<td>Event Name</td>
	<td>Venue</td>
	<td>Date</td>
	<td>Total Cost</td>
	<td>Cancel Event</td>
	</tr>`;
	
	tableEnd = `</table>`;
	tableRows= ``;
	event_arr.forEach((event1, index) => {
		event1.id='link'+index;
		tableRows += `<tr>
						<td>${event1.name}</td>
						<td>${event1.venue}</td>
						<td>${event1.date}</td>
						<td>${event1.price*event1.days}</td>
						<td><a href="#" id="${event1.id}" onclick="deleteElement(this.id)">Cancel</a></td>
					</tr>`;
					
	});

	var table = tableStart+tableRows+tableEnd;
	document.getElementById("result").innerHTML= table;
		
}

function deleteElement(id){

	if(event_arr.length == 1){
		document.getElementById("result").innerHTML= "No Events available";
	}else{
	event_arr = event_arr.filter(event1 => event1.id != id);
	display();
	}



}
--------------------------------------------------------------------------------------------------------------------------------------------
